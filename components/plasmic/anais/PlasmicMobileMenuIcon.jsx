// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pTPBBsFpDxNXZWEGB1hTFr
// Component: Oyi9iDfv3d
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kRUbIpMZpFGh/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_anais.module.css"; // plasmic-import: pTPBBsFpDxNXZWEGB1hTFr/projectcss
import * as sty from "./PlasmicMobileMenuIcon.module.css"; // plasmic-import: Oyi9iDfv3d/css
import HanbMenusvg2Icon from "./icons/PlasmicIcon__HanbMenusvg2"; // plasmic-import: -ahFsFddXQ/icon

export const PlasmicMobileMenuIcon__VariantProps = new Array();

export const PlasmicMobileMenuIcon__ArgProps = new Array();

function PlasmicMobileMenuIcon__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
    <HanbMenusvg2Icon
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      role={"img"}
    />
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMobileMenuIcon__ArgProps,
      internalVariantPropNames: PlasmicMobileMenuIcon__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicMobileMenuIcon__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileMenuIcon";
  } else {
    func.displayName = `PlasmicMobileMenuIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileMenuIcon = Object.assign(
  // Top-level PlasmicMobileMenuIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicMobileMenuIcon
    internalVariantProps: PlasmicMobileMenuIcon__VariantProps,
    internalArgProps: PlasmicMobileMenuIcon__ArgProps
  }
);

export default PlasmicMobileMenuIcon;
/* prettier-ignore-end */
