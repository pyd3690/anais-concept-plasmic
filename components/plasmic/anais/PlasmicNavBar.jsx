// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pTPBBsFpDxNXZWEGB1hTFr
// Component: -siGeKZerak
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MobileMenuIcon from "../../MobileMenuIcon"; // plasmic-import: Oyi9iDfv3d/component
import MenuItem from "../../MenuItem"; // plasmic-import: yCIRZbQvnh/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kRUbIpMZpFGh/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_anais.module.css"; // plasmic-import: pTPBBsFpDxNXZWEGB1hTFr/projectcss
import * as sty from "./PlasmicNavBar.module.css"; // plasmic-import: -siGeKZerak/css

export const PlasmicNavBar__VariantProps = new Array("menuShow");

export const PlasmicNavBar__ArgProps = new Array();

function PlasmicNavBar__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__jpeb)}
      >
        {(hasVariant(globalVariants, "screen", "mobile") ? false : false) ? (
          <div className={classNames(defaultcss.all, sty.box__xuXoR)} />
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
          <MobileMenuIcon
            data-plasmic-name={"mobileMenuIcon"}
            data-plasmic-override={overrides.mobileMenuIcon}
            className={classNames("__wab_instance", sty.mobileMenuIcon, {
              [sty.mobileMenuIcon__menuShow]: hasVariant(
                variants,
                "menuShow",
                "menuShow"
              )
            })}
          />
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img)}
            role={"img"}
            src={
              hasVariant(globalVariants, "screen", "mobile")
                ? "/plasmic/anais/images/imagesRemovebgPreviewpng2.png"
                : undefined
            }
          />
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
          <div
            data-plasmic-name={"logobox"}
            data-plasmic-override={overrides.logobox}
            className={classNames(defaultcss.all, sty.logobox)}
          />
        ) : null}

        <p.Stack
          as={"div"}
          data-plasmic-name={"menuLinks"}
          data-plasmic-override={overrides.menuLinks}
          hasGap={true}
          className={classNames(defaultcss.all, sty.menuLinks)}
        >
          <MenuItem
            className={classNames("__wab_instance", sty.menuItem__eumu5)}
          />

          <MenuItem
            className={classNames("__wab_instance", sty.menuItem__jiGzY)}
            slot2={"Boutique"}
          />

          <MenuItem
            className={classNames("__wab_instance", sty.menuItem___57Qu1)}
            slot2={"Blog"}
          />

          <MenuItem
            className={classNames("__wab_instance", sty.menuItem___2TzH8)}
            slot2={"Contact"}
          />

          <div
            data-plasmic-name={"shoppingCartIcon"}
            data-plasmic-override={overrides.shoppingCartIcon}
            className={classNames(defaultcss.all, sty.shoppingCartIcon)}
          >
            <div className={classNames(defaultcss.all, sty.box__y0Ej5)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__pH4NY
                )}
              >
                {"0"}
              </div>
            </div>
          </div>
        </p.Stack>
      </p.Stack>

      {(
        hasVariant(variants, "menuShow", "menuShow")
          ? true
          : hasVariant(globalVariants, "screen", "mobile")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"mobileverticalMenu"}
          data-plasmic-override={overrides.mobileverticalMenu}
          hasGap={true}
          className={classNames(defaultcss.all, sty.mobileverticalMenu, {
            [sty.mobileverticalMenu__menuShow]: hasVariant(
              variants,
              "menuShow",
              "menuShow"
            )
          })}
        >
          <MenuItem
            className={classNames("__wab_instance", sty.menuItem__aYzK)}
          />

          <MenuItem
            className={classNames("__wab_instance", sty.menuItem__cMjf6)}
            slot2={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__xyGnC
                )}
              >
                {"Boutique"}
              </div>
            }
          />

          <MenuItem
            className={classNames("__wab_instance", sty.menuItem__q0Evw)}
            slot2={"Blog"}
          />

          <MenuItem
            className={classNames("__wab_instance", sty.menuItem__mmHl7)}
            slot2={"Contact"}
          />
        </p.Stack>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "mobileMenuIcon",
    "img",
    "logobox",
    "menuLinks",
    "shoppingCartIcon",
    "mobileverticalMenu"
  ],

  mobileMenuIcon: ["mobileMenuIcon"],
  img: ["img"],
  logobox: ["logobox"],
  menuLinks: ["menuLinks", "shoppingCartIcon"],
  shoppingCartIcon: ["shoppingCartIcon"],
  mobileverticalMenu: ["mobileverticalMenu"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavBar__ArgProps,
      internalVariantPropNames: PlasmicNavBar__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mobileMenuIcon: makeNodeComponent("mobileMenuIcon"),
    img: makeNodeComponent("img"),
    logobox: makeNodeComponent("logobox"),
    menuLinks: makeNodeComponent("menuLinks"),
    shoppingCartIcon: makeNodeComponent("shoppingCartIcon"),
    mobileverticalMenu: makeNodeComponent("mobileverticalMenu"),
    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
